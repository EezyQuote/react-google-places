{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\paul\\\\Documents\\\\Projects\\\\eezyquote\\\\react-google-places-autocomplete\\\\docs\\\\pages\\\\utility-functions\\\\geocode-by-place-id.md\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport withLayout from 'nextra-theme-docs';\nimport { withSSG } from 'nextra/ssg';\nimport layoutConfig from 'C:/Users/paul/Documents/Projects/eezyquote/react-google-places-autocomplete/docs/theme.config.js';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return mdx(\"div\", _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }\n  }));\n};\n\nconst MDXLayout = function NextraPage(props) {\n  return withSSG(withLayout({\n    filename: \"C:/Users/paul/Documents/Projects/eezyquote/react-google-places-autocomplete/docs/pages/utility-functions/geocode-by-place-id.md\",\n    route: \"/utility-functions/geocode-by-place-id\",\n    meta: {},\n    pageMap: [{\n      \"name\": \"examples\",\n      \"route\": \"\\\\examples\"\n    }, {\n      \"name\": \"index\",\n      \"route\": \"\\\\\"\n    }, {\n      \"name\": \"meta.json\",\n      \"meta\": {\n        \"index\": \"Getting Started\",\n        \"props\": \"Props\",\n        \"examples\": \"Examples\",\n        \"utility-functions\": \"Utility functions\"\n      }\n    }, {\n      \"name\": \"props\",\n      \"route\": \"\\\\props\"\n    }, {\n      \"name\": \"utility-functions\",\n      \"children\": [{\n        \"name\": \"geocode-by-address\",\n        \"route\": \"\\\\utility-functions\\\\geocode-by-address\"\n      }, {\n        \"name\": \"geocode-by-place-id\",\n        \"route\": \"\\\\utility-functions\\\\geocode-by-place-id\"\n      }, {\n        \"name\": \"get-latitude-and-longitude\",\n        \"route\": \"\\\\utility-functions\\\\get-latitude-and-longitude\"\n      }, {\n        \"name\": \"meta.json\",\n        \"meta\": {\n          \"geocode-by-address\": \"Geocode by Address\",\n          \"geocode-by-place-id\": \"Geocode by Place ID\",\n          \"get-latitude-and-longitude\": \"Get Lat and Long\"\n        }\n      }],\n      \"route\": \"\\\\utility-functions\"\n    }]\n  }, layoutConfig))(props);\n};\n\nexport default function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, props, {\n    components: components,\n    mdxType: \"MDXLayout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 10\n    }\n  }), mdx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, `This functions allows to get result by a place id using `, mdx(\"a\", _extends({\n    \"href\": \"https://developers.google.com/maps/documentation/javascript/geocoding\",\n    \"parentName\": \"p\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }), `Google Maps Geocoder`), `.`), mdx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, `Firm`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    \"className\": \"language-tsx\",\n    \"parentName\": \"pre\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }\n  }), `const geocodeByPlaceId = (placeId: string): Promise<google.maps.GeocoderResult[]>;\n`)), mdx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, `Usage`), mdx(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, mdx(\"code\", _extends({\n    \"className\": \"language-js\",\n    \"parentName\": \"pre\"\n  }, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 10\n    }\n  }), `import { geocodeByPlaceId } from '@eezyquote/react-google-places';\n\ngeocodeByPlaceId('ChIJeaZJB3y8yRIRTrJnKfTRWf4')\n  .then(results => console.log(results))\n  .catch(error => console.error(error));\n`)));\n}\n;\nMDXContent.isMDXComponent = true;","map":{"version":3,"sources":["C:/Users/paul/Documents/Projects/eezyquote/react-google-places-autocomplete/docs/pages/utility-functions/geocode-by-place-id.md"],"names":["React","mdx","withLayout","withSSG","layoutConfig","makeShortcode","name","MDXDefaultShortcode","props","console","warn","MDXLayout","NextraPage","filename","route","meta","pageMap","MDXContent","components","isMDXComponent"],"mappings":";;;;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,eAApB;AAEA;;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,YAAP,MAAyB,kGAAzB;;AAEA,MAAMC,aAAa,GAAGC,IAAI,IAAI,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AAChEC,EAAAA,OAAO,CAACC,IAAR,CAAa,eAAeJ,IAAf,GAAsB,yEAAnC;AACA,SAAO,wBAASE,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAHD;;AAKA,MAAMG,SAAS,GAAG,SAASC,UAAT,CAAqBJ,KAArB,EAA4B;AAC1C,SAAOL,OAAO,CAACD,UAAU,CAAC;AACxBW,IAAAA,QAAQ,EAAE,iIADc;AAExBC,IAAAA,KAAK,EAAE,wCAFiB;AAGxBC,IAAAA,IAAI,EAAE,EAHkB;AAIxBC,IAAAA,OAAO,EAAE,CAAC;AAAC,cAAO,UAAR;AAAmB,eAAQ;AAA3B,KAAD,EAA0C;AAAC,cAAO,OAAR;AAAgB,eAAQ;AAAxB,KAA1C,EAAwE;AAAC,cAAO,WAAR;AAAoB,cAAO;AAAC,iBAAQ,iBAAT;AAA2B,iBAAQ,OAAnC;AAA2C,oBAAW,UAAtD;AAAiE,6BAAoB;AAArF;AAA3B,KAAxE,EAA8M;AAAC,cAAO,OAAR;AAAgB,eAAQ;AAAxB,KAA9M,EAAiP;AAAC,cAAO,mBAAR;AAA4B,kBAAW,CAAC;AAAC,gBAAO,oBAAR;AAA6B,iBAAQ;AAArC,OAAD,EAAiF;AAAC,gBAAO,qBAAR;AAA8B,iBAAQ;AAAtC,OAAjF,EAAmK;AAAC,gBAAO,4BAAR;AAAqC,iBAAQ;AAA7C,OAAnK,EAAmQ;AAAC,gBAAO,WAAR;AAAoB,gBAAO;AAAC,gCAAqB,oBAAtB;AAA2C,iCAAsB,qBAAjE;AAAuF,wCAA6B;AAApH;AAA3B,OAAnQ,CAAvC;AAA+c,eAAQ;AAAvd,KAAjP;AAJe,GAAD,EAKtBZ,YALsB,CAAX,CAAP,CAKWI,KALX,CAAP;AAMH,CAPD;;AAQA,eAAe,SAASS,UAAT,OAGZ;AAAA,MAHgC;AACjCC,IAAAA;AADiC,GAGhC;AAAA,MADEV,KACF;;AACD,SAAO,IAAC,SAAD,eAAeA,KAAf;AAAsB,IAAA,UAAU,EAAEU,UAAlC;AAA8C,IAAA,OAAO,EAAC,WAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,0DAAL,EACE,kBAAO;AACL,YAAQ,uEADH;AAEL,kBAAc;AAFT,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGK,sBAHL,CADF,EAKI,GALJ,CADK,EAOL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,MAAN,CAPK,EAQL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,qBAAU;AACX,iBAAa,cADF;AAEX,kBAAc;AAFH,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGE;AACX,CAJS,CAAL,CARK,EAaL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,OAAN,CAbK,EAcL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAK,qBAAU;AACX,iBAAa,aADF;AAEX,kBAAc;AAFH,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAGE;AACX;AACA;AACA;AACA;AACA,CARS,CAAL,CAdK,CAAP;AAyBD;AAED;AACAD,UAAU,CAACE,cAAX,GAA4B,IAA5B","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport withLayout from 'nextra-theme-docs'\nimport { withSSG } from 'nextra/ssg'\nimport layoutConfig from 'C:/Users/paul/Documents/Projects/eezyquote/react-google-places-autocomplete/docs/theme.config.js'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst MDXLayout = function NextraPage (props) {\n    return withSSG(withLayout({\n      filename: \"C:/Users/paul/Documents/Projects/eezyquote/react-google-places-autocomplete/docs/pages/utility-functions/geocode-by-place-id.md\",\n      route: \"/utility-functions/geocode-by-place-id\",\n      meta: {},\n      pageMap: [{\"name\":\"examples\",\"route\":\"\\\\examples\"},{\"name\":\"index\",\"route\":\"\\\\\"},{\"name\":\"meta.json\",\"meta\":{\"index\":\"Getting Started\",\"props\":\"Props\",\"examples\":\"Examples\",\"utility-functions\":\"Utility functions\"}},{\"name\":\"props\",\"route\":\"\\\\props\"},{\"name\":\"utility-functions\",\"children\":[{\"name\":\"geocode-by-address\",\"route\":\"\\\\utility-functions\\\\geocode-by-address\"},{\"name\":\"geocode-by-place-id\",\"route\":\"\\\\utility-functions\\\\geocode-by-place-id\"},{\"name\":\"get-latitude-and-longitude\",\"route\":\"\\\\utility-functions\\\\get-latitude-and-longitude\"},{\"name\":\"meta.json\",\"meta\":{\"geocode-by-address\":\"Geocode by Address\",\"geocode-by-place-id\":\"Geocode by Place ID\",\"get-latitude-and-longitude\":\"Get Lat and Long\"}}],\"route\":\"\\\\utility-functions\"}]\n    }, layoutConfig))(props)\n}\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`This functions allows to get result by a place id using `}\n      <a {...{\n        \"href\": \"https://developers.google.com/maps/documentation/javascript/geocoding\",\n        \"parentName\": \"p\"\n      }}>{`Google Maps Geocoder`}</a>\n      {`.`}</p>\n    <h2>{`Firm`}</h2>\n    <pre><code {...{\n        \"className\": \"language-tsx\",\n        \"parentName\": \"pre\"\n      }}>{`const geocodeByPlaceId = (placeId: string): Promise<google.maps.GeocoderResult[]>;\n`}</code></pre>\n    <h2>{`Usage`}</h2>\n    <pre><code {...{\n        \"className\": \"language-js\",\n        \"parentName\": \"pre\"\n      }}>{`import { geocodeByPlaceId } from '@eezyquote/react-google-places';\n\ngeocodeByPlaceId('ChIJeaZJB3y8yRIRTrJnKfTRWf4')\n  .then(results => console.log(results))\n  .catch(error => console.error(error));\n`}</code></pre>\n\n  </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"]},"metadata":{},"sourceType":"module"}